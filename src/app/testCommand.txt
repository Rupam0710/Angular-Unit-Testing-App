1. To run all the folders together - ng test

2. To run a specific folder - ng test --include src\app\foldername

3. To generate karma.config file - ng g config karma

4. Exclude Angular Unit Test Case from Execution
   
   Case using 'x' keyword we can exclude any test case from Execution

   xit('Show Addition result', ()=>{
    expect(Addition(10,20)).toBeGreaterThan(20);
   })

5. Matchers in angular unit test case

   What are matchers?
    
   a. Matchers are nothing but compare functions to actually compare the expected and actual result in the test specs
   b. Matchers are javascript function that does a boolean comparision between an actual output and an expected output
   c. There are 2 types of matchers Inbuilt matcher and Custom Matchers.

   d. Inbuilt matchers - matchers which are built in the jasmine framework are called inbuilt matcher.The user can easily use it implicitly.
   ex - toBe , toBeGreaterThan ,toBeGreaterThanOrEqual, toBeLessThanOrEqual ,toBeNull, etc 

   e. Custom Matchers - The matchers which are not present in the inbuilt system library of Jasmine is called as custom matcher. Custom matcher needs to be drfined explicitly().

6. ToBe and ToEqual in-built matcher in angular unit test

   We can use toBe for primitives like string,boolean and number. For everything else we use toEqual 

7.  in-built matcher in angular Unit test

    tobe(true)
    matcher function performs the test: actual === expected
    syntax: expect(flag).toBe(true/false)
    the test passes only if the flag has the value true
    in the case of expect(flag).tobe(true)

    tobeTrue()
    matcher function performs the test: (actual === true || is(actual,'boolean') && actual.valueOf())
    syntax: expect(flag).tobeTrue()
    this function behaves the same way as tobe(true) but handles an additional case
    tobe(true) -> only handles primitive boolean type
    tobeTrue() -> handles primitive boolean type and a boolean object

    tobeTruthy()
    This boolean matcher is used in jasmine to check whether the result is equal to true or false.

    tobeFalsy()
     This boolean matcher is used in jasmine to check whether the result is equal to true or false.
     It matches the output to be false whereas toBeTruthy matches the output to be true.

    expect(true).toBeTruthy(); -> true 
    expect('1').toBeTruthy(); -> true 
    expect(0).toBeTruthy(); -> false
    expect(undefined).toBeTruthy(); -> false
    expect(NaN).toBeTruthy(); -> false
    expect(false).toBeTruthy(); -> false 
    expect('').toBeTruthy(); -> false 